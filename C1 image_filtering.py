# -*- coding: utf-8 -*-
"""Image filtering 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wm0ZoUH3FkNqvh_qyenB7mrq-rs9zNMi
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess image
def load_and_preprocess_image(image_path, resize_dim=(512, 512)):
    """
    Load an image and preprocess it for image processing.

    Parameters
    ----------
    image_path : str
        Path to the image file to be loaded.

    resize_dim : tuple of int, optional
        The dimensions to resize the image to. Defaults to (512, 512).

    Returns
    -------
    img : numpy array
        The resized and grayscale image.
    """
    img = cv2.imread(image_path)
    img_resized = cv2.resize(img, resize_dim)
    img_gray = cv2.cvtColor(img_resized, cv2.COLOR_BGR2GRAY)
    return img_gray

# Apply Sobel filter for edge detection
def apply_sobel_filter(img):
    """
    Apply Sobel filter to an image for edge detection.

    Parameters
    ----------
    img : numpy array
        The input image.

    Returns
    -------
    sobel_combined : numpy array
        The result of applying Sobel filters in the horizontal and vertical directions
        and combining them into a single image.

    Notes
    -----
    The Sobel filter is a discrete differentiation operator that computes an approximation
    of the gradient of the image intensity function. It is used to detect edges in an image.
    """
    sobelx = cv2.Sobel(img, cv2.CV_64F, 1, 0, ksize=3)  # Sobel X
    sobely = cv2.Sobel(img, cv2.CV_64F, 0, 1, ksize=3)  # Sobel Y
    sobel_combined = cv2.magnitude(sobelx, sobely)
    return sobel_combined

# Apply Median filter for noise reduction
def apply_median_filter(img, kernel_size=5):
    """
    Apply a median filter to an image for noise reduction.

    Parameters
    ----------
    img : numpy array
        The input image.

    kernel_size : int, optional
        The size of the median filter kernel. Defaults to 5.

    Returns
    -------
    blurred_img : numpy array
        The blurred image after applying the median filter.

    Notes
    -----
    Median filtering is a non-linear filtering technique that is used to reduce noise in an image.
    It works by replacing each pixel with the median value of neighboring pixels within a kernel window.
    Median filtering is effective for reducing salt and pepper noise and is commonly used in image processing tasks.
    """

    return cv2.medianBlur(img, kernel_size)

def apply_average_filter(img, kernel_size=5):
    """
    Apply a median filter to an image for noise reduction.

    Parameters
    ----------
    img : numpy array
        The input image.

    kernel_size : int, optional
        The size of the median filter kernel. Defaults to 5.

    Returns
    -------
    blurred_img : numpy array
        The blurred image after applying the median filter.

    Notes
    -----
    Median filtering is a non-linear filtering technique that is used to reduce noise in an image.
    It works by replacing each pixel with the median value of neighboring pixels within a kernel window.
    Median filtering is effective for reducing salt and pepper noise and is commonly used in image processing tasks.
    """
    return cv2.blur(img, (kernel_size, kernel_size))

# Apply Gaussian filter for blurring
def apply_gaussian_filter(img, kernel_size=5, sigma=1.0):
    """
    Apply a Gaussian filter to an image for blurring.

    Parameters
    ----------
    img : numpy array
        The input image.

    kernel_size : int, optional
        The size of the Gaussian filter kernel. Defaults to 5.

    sigma : float, optional
        The standard deviation of the Gaussian filter. Defaults to 1.0.

    Returns
    -------
    blurred_img : numpy array
        The blurred image after applying the Gaussian filter.

    Notes
    -----
    Gaussian filtering is a linear filtering technique that is used to blur an image.
    It works by convolving the image with a Gaussian filter kernel. Gaussian filtering
    is effective for reducing noise in an image and is commonly used in image processing tasks.
    """
    return cv2.GaussianBlur(img, (kernel_size, kernel_size), sigma)

# Display images for comparison
def display_images(original, sobel, median, gaussian):
    """
    Display four images for comparison.

    Parameters
    ----------
    original : numpy array
        The original image.

    sobel : numpy array
        The image after applying the Sobel filter.

    median : numpy array
        The image after applying the median filter.

    gaussian : numpy array
        The image after applying the Gaussian filter.

    Notes
    -----
    Display the four images in a single figure with subplots for comparison.

    """
    plt.figure(figsize=(12, 6))

    plt.subplot(1, 4, 1)
    plt.imshow(original, cmap='gray')
    plt.title('Original Image')

    plt.subplot(1, 4, 2)
    plt.imshow(sobel, cmap='gray')
    plt.title('Sobel Filter')

    plt.subplot(1, 4, 3)
    plt.imshow(median, cmap='gray')
    plt.title('Median Filter')

    plt.subplot(1, 4, 4)
    plt.imshow(gaussian, cmap='gray')
    plt.title('Gaussian Filter')

    plt.show()

# Main function to apply filters and display resultsá¹‡
def main(image_path):
    """
    Load an image from the given path, apply the Sobel, median and Gaussian filters
    to it, and display the original image and the filtered images side by side.

    Parameters
    ----------
    image_path : string
        Path to the image file.

    Notes
    -----
    The filters are applied in the following order: Sobel, median, Gaussian.

    """
    img = load_and_preprocess_image(image_path)

    # Apply filters
    sobel_img = apply_sobel_filter(img)
    median_img = apply_median_filter(img)
    gaussian_img = apply_gaussian_filter(img)

    # Display results
    display_images(img, sobel_img, median_img, gaussian_img)

# Test the code with a sample image
image_path = "/content/drive/MyDrive/CV Exam Datasets /filtering_threshold_otsu_watershed_images/train_018.png"  # Replace with your image path
main(image_path)
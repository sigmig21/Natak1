# -*- coding: utf-8 -*-
"""CV Mock Assi8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MA50SlYpGhqZa1bOJAiVZ3rqRVyi4CkC
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models

def load_and_preprocess_image(image_path):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    image = cv2.resize(image, (128, 128), interpolation=cv2.INTER_CUBIC)
    image = image.astype('float32') / 255.0
    return image

def add_noise(image):
    noise = np.random.normal(0, 0.1, image.shape)
    noisy_image = np.clip(image + noise, 0, 1)
    return noisy_image

def build_autoencoder():
    input_img = layers.Input(shape=(128, 128, 1))
    x = layers.Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)
    x = layers.MaxPooling2D((2, 2), padding='same')(x)
    x = layers.Conv2D(16, (3, 3), activation='relu', padding='same')(x)
    x = layers.MaxPooling2D((2, 2), padding='same')(x)
    x = layers.Conv2D(8, (3, 3), activation='relu', padding='same')(x)
    encoded = layers.MaxPooling2D((2, 2), padding='same')(x)

    x = layers.Conv2D(8, (3, 3), activation='relu', padding='same')(encoded)
    x = layers.UpSampling2D((2, 2))(x)
    x = layers.Conv2D(16, (3, 3), activation='relu', padding='same')(x)
    x = layers.UpSampling2D((2, 2))(x)
    x = layers.Conv2D(32, (3, 3), activation='relu', padding='same')(x)
    x = layers.UpSampling2D((2, 2))(x)
    decoded = layers.Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)

    autoencoder = models.Model(input_img, decoded)
    autoencoder.compile(optimizer='adam', loss='binary_crossentropy')
    return autoencoder

def display_images(original, noisy, denoised):
    plt.figure(figsize=(12, 4))
    plt.subplot(1, 3, 1)
    plt.title('Original Image')
    plt.imshow(original, cmap='gray')
    plt.axis('off')

    plt.subplot(1, 3, 2)
    plt.title('Noisy Image')
    plt.imshow(noisy, cmap='gray')
    plt.axis('off')

    plt.subplot(1, 3, 3)
    plt.title('Denoised Image')
    plt.imshow(denoised, cmap='gray')
    plt.axis('off')

    plt.show()
    plt.pause(3)
    plt.close()

def main():
    image_path = r'/content/tavor_gray.jpg'
    original_image = load_and_preprocess_image(image_path)
    print("Image loaded successfully.")

    while True:
      print("\nMenu:")
      print("1. Add Noise")
      print("2. Train Autoencoder")
      print("3. Denoise Image")
      print("4. Exit")

      choice = input("Enter your choice: ")

      if choice == '1':
        noisy_image = add_noise(original_image)
        print("Noise added to the image.")

      elif choice == '2':
        noisy_image_reshaped = noisy_image.reshape(1, 128, 128, 1)
        original_image_reshaped = original_image.reshape(1, 128, 128, 1)
        autoencoder = build_autoencoder()
        autoencoder.fit(noisy_image_reshaped, original_image_reshaped,epochs=50, batch_size=1, shuffle=True)
        print("Autoencoder trained successfully.")

      elif choice == '3':
        denoised_image = autoencoder.predict(noisy_image_reshaped)
        denoised_image = denoised_image.reshape(128, 128)
        display_images(original_image, noisy_image, denoised_image)

      elif choice == '4':
        print("Exiting the program.")
        break

      else:
        print("Invalid choice. Please try again.")

if __name__ == "__main__":
  main()

main()
# -*- coding: utf-8 -*-
"""4 visualizing_cnn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GZiFX2vzbmXejc9lldbld8oj0-CMTh4U
"""

import tensorflow as tf
import matplotlib.pyplot as plt

plt.rc('figure', autolayout=True)
plt.rc('image', cmap='viridis')

from google.colab import drive
drive.mount('/content/drive')

def load_n_process_img(img_path):

    img = tf.io.read_file(img_path)
    img = tf.io.decode_jpeg(img, channels=1)
    img = tf.image.resize(img, size=[300, 300])
    img = tf.image.convert_image_dtype(img, dtype=tf.float32)
    img = tf.expand_dims(img, axis=0)  # Add batch dimension

    return img

def cnn_model():

    inputs = tf.keras.Input(shape=(300, 300, 1))
    x = tf.keras.layers.Conv2D(8, (3, 3), activation='relu', padding='same')(inputs)
    x = tf.keras.layers.MaxPooling2D((2, 2), padding='same')(x)

    x = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', padding='same')(x)
    x = tf.keras.layers.MaxPooling2D((2, 2), padding='same')(x)

    x = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', padding='same')(x)
    x = tf.keras.layers.MaxPooling2D((2, 2), padding='same')(x)

    model = tf.keras.Model(inputs=inputs, outputs=x)

    return model

def disp_layer(model, img):

    original_img = tf.squeeze(img).numpy()
    plt.figure(figsize=(4, 4))
    plt.imshow(original_img, cmap='gray')
    plt.axis('off')
    plt.title("Original Image")
    plt.show()


    layer_outputs = [layer.output for layer in model.layers if 'conv' in layer.name or 'pool' in layer.name]
    activation_model = tf.keras.Model(inputs=model.input, outputs=layer_outputs)

    activations = activation_model.predict(img)

    for i, activation in enumerate(activations):
        fig, ax = plt.subplots(1, 1, figsize=(4, 4))
        fig.suptitle(f'Layer {i+1} - {model.layers[i].name}', fontsize=16)

        ax.imshow(activation[0, :, :, 0], cmap='gray') #disp o/p of first filter for each layer
        ax.axis('off')

        plt.show()

def main():

    img_path = input("Enter the path of the image: ")


    img = load_n_process_img(img_path)


    model = cnn_model()

    disp_layer(model, img)

if __name__ == "__main__":
    main()

